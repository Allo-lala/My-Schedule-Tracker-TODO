{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carso\\\\Documents\\\\GitHub\\\\Auto-Task-Manager\\\\frontend\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\n// import Header from \"./Components/Header\";\nimport Category from \"./Components/Category\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [categories, setCategories] = React.useState([{\n    name: \"Category 1\",\n    tasks: [{\n      name: \"Task 1\",\n      description: \"Task Description that goes on and continues for many lines until there is enough content to clearly show what a task will look like\",\n      color: \"#FF6700\"\n    }],\n    addTask: task => {\n      addTask(\"Category 1\", task);\n    }\n  }, {\n    name: \"Category 2\",\n    tasks: [{\n      name: \"Task 1\",\n      description: \"Description 1\",\n      color: \"#FF6700\"\n    }],\n    addTask: task => {\n      addTask(\"Category 2\", task);\n    }\n  }]);\n\n  const addCategory = category => {\n    setCategories([...categories, category]);\n  };\n\n  const addTask = (categoryName, task) => {\n    const newCategories = [...categories];\n    const targetCategory = newCategories.find(c => c.name === categoryName);\n\n    if (targetCategory) {\n      targetCategory.tasks.push(task);\n      setCategories(newCategories);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"taskManagerParent\",\n      children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(Category, { ...category\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"juU2D0XlAyOHyBIv7IT6Cj07k8w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Category","App","categories","setCategories","useState","name","tasks","description","color","addTask","task","addCategory","category","categoryName","newCategories","targetCategory","find","c","push","map","index"],"sources":["C:/Users/carso/Documents/GitHub/Auto-Task-Manager/frontend/src/App.tsx"],"sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { TaskProps } from \"./Components/Task\";\n// import Header from \"./Components/Header\";\nimport Category, { CategoryProps } from \"./Components/Category\";\n\nconst App = () => {\n  const [categories, setCategories] = React.useState<CategoryProps[]>([\n    {\n      name: \"Category 1\",\n      tasks: [{\n        name: \"Task 1\",\n        description: \"Task Description that goes on and continues for many lines until there is enough content to clearly show what a task will look like\",\n        color: \"#FF6700\"\n      }],\n      addTask: (task: TaskProps) => {\n        addTask(\"Category 1\", task);\n      }\n    },\n    {\n      name: \"Category 2\",\n      tasks: [{\n        name: \"Task 1\",\n        description: \"Description 1\",\n        color: \"#FF6700\"\n      }],\n      addTask: (task: TaskProps) => {\n        addTask(\"Category 2\", task);\n      }\n    }\n  ])\n\n  const addCategory = (category: CategoryProps) => {\n    setCategories([...categories, category]);\n  }\n  \n  const addTask = (categoryName: string, task: TaskProps) => {\n    const newCategories = [...categories]\n    const targetCategory = newCategories.find(c => c.name === categoryName)\n    if (targetCategory) {\n      targetCategory.tasks.push(task)\n      setCategories(newCategories)\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      {/* Where the header will go\n      <Header /> */}\n\n      {/* All task-related content */}\n      <main className=\"taskManagerParent\">\n        {/* Where the tasks resides */}\n        {/* Task catagory */}\n\n          {categories.map((category, index) => (\n            <Category key={index} {...category} />\n          ))}\n          \n      </main>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA;AACA,OAAOC,QAAP,MAAwC,uBAAxC;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,KAAK,CAACK,QAAN,CAAgC,CAClE;IACEC,IAAI,EAAE,YADR;IAEEC,KAAK,EAAE,CAAC;MACND,IAAI,EAAE,QADA;MAENE,WAAW,EAAE,qIAFP;MAGNC,KAAK,EAAE;IAHD,CAAD,CAFT;IAOEC,OAAO,EAAGC,IAAD,IAAqB;MAC5BD,OAAO,CAAC,YAAD,EAAeC,IAAf,CAAP;IACD;EATH,CADkE,EAYlE;IACEL,IAAI,EAAE,YADR;IAEEC,KAAK,EAAE,CAAC;MACND,IAAI,EAAE,QADA;MAENE,WAAW,EAAE,eAFP;MAGNC,KAAK,EAAE;IAHD,CAAD,CAFT;IAOEC,OAAO,EAAGC,IAAD,IAAqB;MAC5BD,OAAO,CAAC,YAAD,EAAeC,IAAf,CAAP;IACD;EATH,CAZkE,CAAhC,CAApC;;EAyBA,MAAMC,WAAW,GAAIC,QAAD,IAA6B;IAC/CT,aAAa,CAAC,CAAC,GAAGD,UAAJ,EAAgBU,QAAhB,CAAD,CAAb;EACD,CAFD;;EAIA,MAAMH,OAAO,GAAG,CAACI,YAAD,EAAuBH,IAAvB,KAA2C;IACzD,MAAMI,aAAa,GAAG,CAAC,GAAGZ,UAAJ,CAAtB;IACA,MAAMa,cAAc,GAAGD,aAAa,CAACE,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACZ,IAAF,KAAWQ,YAAnC,CAAvB;;IACA,IAAIE,cAAJ,EAAoB;MAClBA,cAAc,CAACT,KAAf,CAAqBY,IAArB,CAA0BR,IAA1B;MACAP,aAAa,CAACW,aAAD,CAAb;IACD;EACF,CAPD;;EASA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBAKE;MAAM,SAAS,EAAC,mBAAhB;MAAA,UAIKZ,UAAU,CAACiB,GAAX,CAAe,CAACP,QAAD,EAAWQ,KAAX,kBACd,QAAC,QAAD,OAA0BR;MAA1B,GAAeQ,KAAf;QAAA;QAAA;QAAA;MAAA,QADD;IAJL;MAAA;MAAA;MAAA;IAAA;EALF;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD,CAxDD;;GAAMnB,G;;KAAAA,G;AA0DN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}